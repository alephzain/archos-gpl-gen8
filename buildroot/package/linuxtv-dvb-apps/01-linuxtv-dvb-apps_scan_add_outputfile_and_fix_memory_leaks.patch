diff -rU5 linuxtv-dvb-apps-hg-03042008/util/scan/scan.c linuxtv-dvb-apps-hg-03042008-fixed/util/scan/scan.c
--- linuxtv-dvb-apps-hg-03042008/util/scan/scan.c	2008-04-03 16:08:09.000000000 +0200
+++ linuxtv-dvb-apps-hg-03042008-fixed/util/scan/scan.c	2008-04-10 18:14:22.000000000 +0200
@@ -44,17 +44,18 @@
 #include "scan.h"
 #include "lnb.h"
 
 #include "atsc_psip_section.h"
 
-static char demux_devname[80];
+static char demux_devname[80] = {0};
+static char output_file[256] = {0} ;
 
 static struct dvb_frontend_info fe_info = {
 	.type = -1
 };
 
-int verbosity = 2;
+int verbosity = 0;
 
 static int long_timeout;
 static int current_tp_only;
 static int get_other_nits;
 static int vdr_dump_provider;
@@ -456,11 +457,11 @@
 						   struct transponder *t)
 {
 	static const fe_modulation_t m_tab [] = { QPSK, QAM_16, QAM_64, QAM_AUTO };
 	static const fe_code_rate_t ofec_tab [8] = { FEC_1_2, FEC_2_3, FEC_3_4,
 					       FEC_5_6, FEC_7_8 };
-	struct dvb_ofdm_parameters *o;
+	struct dvb_ofdm_parameters *o=NULL;
 
 	if (!t) {
 		warning("terrestrial_delivery_system_descriptor outside transport stream definition (ignored)\n");
 		return;
 	}
@@ -506,11 +507,11 @@
 }
 
 static void parse_frequency_list_descriptor (const unsigned char *buf,
 				      struct transponder *t)
 {
-	int n, i;
+	int n=0, i=0;
 	typeof(*t->other_f) f;
 
 	if (!t) {
 		warning("frequency_list_descriptor outside transport stream definition (ignored)\n");
 		return;
@@ -532,12 +533,12 @@
 	}
 }
 
 static void parse_service_descriptor (const unsigned char *buf, struct service *s)
 {
-	unsigned char len;
-	unsigned char *src, *dest;
+	unsigned char len=0;
+	unsigned char *src=NULL, *dest=NULL;
 
 	s->type = buf[2];
 
 	buf += 3;
 	len = *buf;
@@ -729,15 +730,15 @@
 }
 
 
 static void parse_pmt (const unsigned char *buf, int section_length, int service_id)
 {
-	int program_info_len;
-	struct service *s;
-        char msg_buf[14 * AUDIO_CHAN_MAX + 1];
-        char *tmp;
-        int i;
+	int program_info_len=0;
+	struct service *s=NULL;
+        char msg_buf[14 * AUDIO_CHAN_MAX + 1]={0};
+        char *tmp=NULL;
+        int i=0;
 
 	s = find_service (current_tp, service_id);
 	if (!s) {
 		error("PMT for serivce_id 0x%04x was not in PAT\n", service_id);
 		return;
@@ -928,11 +929,11 @@
 
 /* ATSC PSIP VCT */
 static void parse_atsc_service_loc_desc(struct service *s,const unsigned char *buf)
 {
 	struct ATSC_service_location_descriptor d = read_ATSC_service_location_descriptor(buf);
-	int i;
+	int i=0;
 	unsigned char *b = (unsigned char *) buf+5;
 
 	s->pcr_pid = d.PCR_PID;
 	for (i=0; i < d.number_elements; i++) {
 		struct ATSC_service_location_element e = read_ATSC_service_location_element(b);
@@ -961,11 +962,11 @@
 }
 
 static void parse_atsc_ext_chan_name_desc(struct service *s,const unsigned char *buf)
 {
 	unsigned char *b = (unsigned char *) buf+2;
-	int i,j;
+	int i=0,j=0;
 	int num_str = b[0];
 
 	b++;
 	for (i = 0; i < num_str; i++) {
 		int num_seg = b[3];
@@ -991,11 +992,11 @@
 }
 
 static void parse_psip_descriptors(struct service *s,const unsigned char *buf,int len)
 {
 	unsigned char *b = (unsigned char *) buf;
-	int desc_len;
+	int desc_len=0;
 	while (len > 0) {
 		desc_len = b[1];
 		switch (b[0]) {
 			case ATSC_SERVICE_LOCATION_DESCRIPTOR_ID:
 				parse_atsc_service_loc_desc(s,b);
@@ -1019,11 +1020,11 @@
 	(void)table_id;
 	(void)transport_stream_id;
 
 /*	int protocol_version = buf[0];*/
 	int num_channels_in_section = buf[1];
-	int i;
+	int i=0;
 	int pseudo_id = 0xffff;
 	unsigned char *b = (unsigned char *) buf + 2;
 
 	for (i = 0; i < num_channels_in_section; i++) {
 		struct service *s;
@@ -1097,17 +1098,17 @@
  *	   -1 on invalid table id
  */
 static int parse_section (struct section_buf *s)
 {
 	const unsigned char *buf = s->buf;
-	int table_id;
-	int section_length;
-	int table_id_ext;
-	int section_version_number;
-	int section_number;
-	int last_section_number;
-	int i;
+	int table_id=0;
+	int section_length=0;
+	int table_id_ext=0;
+	int section_version_number=0;
+	int section_number=0;
+	int last_section_number=0;
+	int i=0;
 
 	table_id = buf[0];
 
 	if (s->table_id != table_id)
 		return -1;
@@ -1225,11 +1226,11 @@
 }
 
 
 static int read_sections (struct section_buf *s)
 {
-	int section_length, count;
+	int section_length=0, count=0;
 
 	if (s->sectionfilter_done && !s->segmented)
 		return 1;
 
 	/* the section filter API guarantess that we get one full section
@@ -1290,13 +1291,13 @@
 	INIT_LIST_HEAD (&s->list);
 }
 
 static void update_poll_fds(void)
 {
-	struct list_head *p;
-	struct section_buf* s;
-	int i;
+	struct list_head *p=NULL;
+	struct section_buf* s=NULL;
+	int i=0;
 
 	memset(poll_section_bufs, 0, sizeof(poll_section_bufs));
 	for (i = 0; i < MAX_RUNNING; i++)
 		poll_fds[i].fd = -1;
 	i = 0;
@@ -1319,19 +1320,19 @@
 
 static int start_filter (struct section_buf* s)
 {
 	struct dmx_sct_filter_params f;
 
+	memset(&f, 0, sizeof(f));
+
 	if (n_running >= MAX_RUNNING)
 		goto err0;
 	if ((s->fd = open (s->dmx_devname, O_RDWR | O_NONBLOCK)) < 0)
 		goto err0;
 
 	verbosedebug("start filter pid 0x%04x table_id 0x%02x\n", s->pid, s->table_id);
 
-	memset(&f, 0, sizeof(f));
-
 	f.pid = (uint16_t) s->pid;
 
 	if (s->table_id < 0x100 && s->table_id > 0) {
 		f.filter.filter[0] = (uint8_t) s->table_id;
 		f.filter.mask[0]   = 0xff;
@@ -1370,12 +1371,13 @@
 }
 
 
 static void stop_filter (struct section_buf *s)
 {
+	char argp=0;
 	verbosedebug("stop filter pid 0x%04x\n", s->pid);
-	ioctl (s->fd, DMX_STOP);
+	ioctl (s->fd, DMX_STOP,&argp);
 	close (s->fd);
 	s->fd = -1;
 	list_del (&s->list);
 	s->running_time += time(NULL) - s->start_time;
 
@@ -1406,12 +1408,12 @@
 }
 
 
 static void read_filters (void)
 {
-	struct section_buf *s;
-	int i, n, done;
+	struct section_buf *s=NULL;
+	int i=0, n=0, done=0;
 
 	n = poll(poll_fds, n_running, 1000);
 	if (n == -1)
 		errorn("poll");
 
@@ -1437,11 +1439,11 @@
 
 
 static int mem_is_zero (const void *mem, int size)
 {
 	const char *p = mem;
-	int i;
+	int i=0;
 
 	for (i=0; i<size; i++) {
 		if (p[i] != 0x00)
 			return 0;
 	}
@@ -1454,14 +1456,17 @@
 
 static int __tune_to_transponder (int frontend_fd, struct transponder *t)
 {
 	struct dvb_frontend_parameters p;
 	fe_status_t s;
-	int i;
+	int i=0;
 
 	current_tp = t;
 
+	memset(&p,0,sizeof(p));
+	memset(&s,0,sizeof(s));
+
 	if (mem_is_zero (&t->param, sizeof(struct dvb_frontend_parameters)))
 		return -1;
 
 	memcpy (&p, &t->param, sizeof(struct dvb_frontend_parameters));
 
@@ -1554,13 +1559,13 @@
 }
 
 
 static int tune_to_next_transponder (int frontend_fd)
 {
-	struct list_head *pos, *tmp;
-	struct transponder *t, *to;
-	uint32_t freq;
+	struct list_head *pos=NULL, *tmp=NULL;
+	struct transponder *t=NULL, *to=NULL;
+	uint32_t freq=0;
 
 	list_for_each_safe(pos, tmp, &new_transponders) {
 		t = list_entry (pos, struct transponder, list);
 retry:
 		if (tune_to_transponder (frontend_fd, t) == 0)
@@ -1713,15 +1718,15 @@
 	return enum2str(t, typetab, "UNK");
 }
 
 static int tune_initial (int frontend_fd, const char *initial)
 {
-	FILE *inif;
-	unsigned int f, sr;
-	char buf[200];
-	char pol[20], fec[20], qam[20], bw[20], fec2[20], mode[20], guard[20], hier[20];
-	struct transponder *t;
+	FILE *inif=NULL;
+	unsigned int f=0, sr=0;
+	char buf[200] = {0};
+	char pol[20]= {0}, fec[20]= {0}, qam[20]= {0}, bw[20]= {0}, fec2[20]= {0}, mode[20]= {0}, guard[20]= {0}, hier[20]= {0};
+	struct transponder *t=NULL;
 
 	inif = fopen(initial, "r");
 	if (!inif) {
 		error("cannot open '%s': %d %m\n", initial, errno);
 		return -1;
@@ -1804,10 +1809,13 @@
 
 
 static void scan_tp_atsc(void)
 {
 	struct section_buf s0,s1,s2;
+	memset(&s0,0,sizeof(struct section_buf));
+	memset(&s1,0,sizeof(struct section_buf));
+	memset(&s2,0,sizeof(struct section_buf));
 
 	if (no_ATSC_PSIP) {
 		setup_filter(&s0, demux_devname, 0x00, 0x00, -1, 1, 0, 5); /* PAT */
 		add_filter(&s0);
 	} else {
@@ -1833,10 +1841,14 @@
 {
 	struct section_buf s0;
 	struct section_buf s1;
 	struct section_buf s2;
 	struct section_buf s3;
+	memset(&s0,0,sizeof(struct section_buf));
+	memset(&s1,0,sizeof(struct section_buf));
+	memset(&s2,0,sizeof(struct section_buf));
+	memset(&s3,0,sizeof(struct section_buf));
 
 	/**
 	 *  filter timeouts > min repetition rates specified in ETR211
 	 */
 	setup_filter (&s0, demux_devname, 0x00, 0x00, -1, 1, 0, 5); /* PAT */
@@ -1893,11 +1905,11 @@
 }
 
 
 static void pids_dump_service_parameter_set(FILE *f, struct service *s)
 {
-        int i;
+        int i=0;
 
 	fprintf(f, "%-24.24s (0x%04x) %02x: ", s->service_name, s->service_id, s->type);
 	if (!s->pcr_pid || (s->type > 2))
 		fprintf(f, "           ");
 	else if (s->pcr_pid == s->video_pid)
@@ -1937,37 +1949,87 @@
 {
 	(void) t;
 
 	return switch_pos;
 }
-
+static void free_transponders(void)
+{
+	struct list_head *p1=NULL, *p2=NULL;
+	struct transponder *t=NULL;
+	struct service *s=NULL;
+	struct section_buf *sb=NULL;
+	while (! list_empty(&scanned_transponders)) {
+		p1 = scanned_transponders.next;
+		t = list_entry(p1, struct transponder, list);
+		while (! list_empty(&t->services)) {
+			p2 = t->services.next;
+			s = list_entry(p2, struct service, list);
+			if (s->service_name)	{
+				free(s->service_name) ; s->service_name=NULL;
+			}
+			if (s->provider_name)	{
+				free(s->provider_name) ; s->provider_name=NULL;
+			}
+			if (s->priv)	{
+				sb = (struct section_buf *) s->priv;
+				if ( sb->next_seg != NULL)
+					free( sb->next_seg ); 
+				free(s->priv) ; s->priv=NULL;
+			}
+			list_del(p2);
+			free(s);
+		}
+		if (t->other_f) {
+			free(t->other_f); t->other_f=NULL;
+		}
+		list_del(p1);
+		free(t);
+	}
+}
 static void dump_lists (void)
 {
-	struct list_head *p1, *p2;
-	struct transponder *t;
-	struct service *s;
-	int n = 0, i;
-	char sn[20];
+	struct list_head *p1=NULL, *p2=NULL;
+	struct transponder *t=NULL;
+	struct service *s=NULL;
+	int n = 0, i=0;
+	char sn[128]={0};
         int anon_services = 0;
+	FILE * f = NULL;
 
 	list_for_each(p1, &scanned_transponders) {
 		t = list_entry(p1, struct transponder, list);
 		if (t->wrong_frequency)
 			continue;
 		list_for_each(p2, &t->services) {
 			n++;
 		}
 	}
-	info("dumping lists (%d services)\n", n);
+
+	if (strlen(output_file) != 0)
+	{
+		f = fopen(output_file,"w");
+		if (f == NULL)
+		{
+			info("Cannot open file %s : %s. Using stdout.\n",output_file,strerror(errno));
+			f = stdout;
+		}
+	} else
+	{
+		f = stdout;
+	}
+	info("dumping lists (%d services) to %s\n", n, (f==stdout ?"stdout":output_file) );
 
 	list_for_each(p1, &scanned_transponders) {
 		t = list_entry(p1, struct transponder, list);
+		if (t == NULL)
+			continue;
 		if (t->wrong_frequency)
 			continue;
 		list_for_each(p2, &t->services) {
 			s = list_entry(p2, struct service, list);
-
+			if (s == NULL)
+				continue;
 			if (!s->service_name) {
 				/* not in SDT */
 				if (unique_anon_services)
 					snprintf(sn, sizeof(sn), "[%03x-%04x]",
 						 anon_services, s->service_id);
@@ -1995,14 +2057,14 @@
 			if (s->scrambled && !ca_select)
 				continue; /* FTA only */
 			switch (output_format)
 			{
 			  case OUTPUT_PIDS:
-				pids_dump_service_parameter_set (stdout, s);
+				pids_dump_service_parameter_set (f, s);
 				break;
 			  case OUTPUT_VDR:
-				vdr_dump_service_parameter_set (stdout,
+				vdr_dump_service_parameter_set (f,
 						    s->service_name,
 						    s->provider_name,
 						    t->type,
 						    &t->param,
 						    sat_polarisation(t),
@@ -2025,11 +2087,11 @@
 						    vdr_version,
 						    vdr_dump_channum,
 						    s->channel_num);
 				break;
 			  case OUTPUT_ZAP:
-				zap_dump_service_parameter_set (stdout,
+				zap_dump_service_parameter_set (f,
 						    s->service_name,
 						    t->type,
 						    &t->param,
 						    sat_polarisation(t),
 						    sat_number(t),
@@ -2039,22 +2101,25 @@
 			  default:
 				break;
 			  }
 		}
 	}
+	if (f != stdout)
+		fclose(f); f = NULL;
 	info("Done.\n");
 }
 
 static void show_existing_tuning_data_files(void)
 {
 #ifndef DATADIR
 #define DATADIR "/usr/local/share"
 #endif
 	static const char* prefixlist[] = { DATADIR "/dvb", "/etc/dvb",
 					    DATADIR "/doc/packages/dvb", 0 };
-	unsigned int i;
-	const char **prefix;
+	unsigned int i=0;
+	const char **prefix=NULL;
+
 	fprintf(stderr, "initial tuning data files:\n");
 	for (prefix = prefixlist; *prefix; prefix++) {
 		glob_t globbuf;
 		char* globspec = malloc (strlen(*prefix)+9);
 		strcpy (globspec, *prefix); strcat (globspec, "/dvb-?/*");
@@ -2105,18 +2170,19 @@
 	"	-l low[,high[,switch]] in Mhz\n"
 	"	-u      UK DVB-T Freeview channel numbering for VDR\n\n"
 	"	-P do not use ATSC PSIP tables for scanning\n"
 	"	    (but only PAT and PMT) (applies for ATSC only)\n"
 	"	-A N	check for ATSC 1=Terrestrial [default], 2=Cable or 3=both\n"
-	"	-U	Uniquely name unknown services\n";
+	"	-U	Uniquely name unknown services\n"
+	"	-F	Output file (optional, if none given output to stdout)\n";
 
 void
 bad_usage(char *pname, int problem)
 {
-	int i;
-	struct lnb_types_st *lnbp;
-	char **cp;
+	int i=0;
+	struct lnb_types_st *lnbp=NULL;
+	char **cp=NULL;
 
 	switch (problem) {
 	default:
 	case 0:
 		fprintf (stderr, usage, pname);
@@ -2139,25 +2205,26 @@
 	}
 }
 
 int main (int argc, char **argv)
 {
-	char frontend_devname [80];
+	char frontend_devname [80]={0};
 	int adapter = 0, frontend = 0, demux = 0;
-	int opt, i;
-	int frontend_fd;
-	int fe_open_mode;
+	int opt=0, i=0;
+	int frontend_fd=0;
+	int fe_open_mode=0;
 	const char *initial = NULL;
 
 	if (argc <= 1) {
 	    bad_usage(argv[0], 2);
 	    return -1;
 	}
 
+	output_file[0] = 0;
 	/* start with default lnb type */
 	lnb_type = *lnb_enum(0);
-	while ((opt = getopt(argc, argv, "5cnpa:f:d:s:o:x:e:t:i:l:vquPA:U")) != -1) {
+	while ((opt = getopt(argc, argv, "5cnpa:f:d:s:o:x:e:t:i:l:vquPA:UF:")) != -1) {
 		switch (opt) {
 		case 'a':
 			adapter = strtoul(optarg, NULL, 0);
 			break;
 		case 'c':
@@ -2228,15 +2295,17 @@
 			ATSC_type = strtoul(optarg,NULL,0);
 			if (ATSC_type == 0 || ATSC_type > 3) {
 				bad_usage(argv[0], 1);
 				return -1;
 			}
-
 			break;
 		case 'U':
 			unique_anon_services = 1;
 			break;
+		case 'F':
+			strncpy(output_file,optarg,256);
+			break;
 		default:
 			bad_usage(argv[0], 0);
 			return -1;
 		};
 	}
@@ -2296,10 +2365,12 @@
 
 	close (frontend_fd);
 
 	dump_lists ();
 
+	free_transponders();
+
 	return 0;
 }
 
 static void dump_dvb_parameters (FILE *f, struct transponder *t)
 {
